MODULE Dimens;
REQUIRE CoreColor,CoreMenu,Utils, DimCategory, Reflection;
NAMESPACE   Dimens;
 
META configDim(ObjectDim) 
 // элемент root - представляет собой элемент множества подставляющийся вместо всего множества
 // в формах списков можно не показывать 
     getRoot##ObjectDim()  = GROUP MAX ObjectDim c IF isRoot(c) AND NOT isGroup(c);
     getEmpty##ObjectDim()  = GROUP MAX ObjectDim c IF isRoot(c) AND isGroup(c);
     WHEN LOCAL CHANGED(isRoot(ObjectDim sd))  AND ( (GROUP SUM(1) IF (isRoot(ObjectDim all) AND NOT isGroup(all) AND all IS ObjectDim)) > 1 ) DO {
        isRoot(sd)<-NULL ;
        MESSAGE 'только один элемент может представлять корень';
     };
     // список для выбора группы 
      EXTEND FORM form##ObjectDim##Group  
      OBJECTS d = ObjectDim 
      PROPERTIES(d) READONLY 
      ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(d) <- NOT isHide(d);}
      BACKGROUND  #e3e3e3 IF isHide(d)
      pos, code, canonicalName
      ORDERS pos(d),canonicalName(d) FILTERS isGroup(d) AND NOT isRoot(d)
      FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(d) DEFAULT;
     
      selectGroup(ObjectDim r) {
          DIALOG form##ObjectDim##Group OBJECTS d = parent(r) CHANGE;
      };
     
  
    EXTEND  FORM  form##ObjectDim##TreeList  
    TREE tree##ObjectDim t = ObjectDim  PARENT parent(t)
    PROPERTIES (t) 
    ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(t) <- NOT isHide(t);}
    BACKGROUND  #e3e3e3 IF isHide(t)
            tabName BACKGROUND color(t),
            name    BACKGROUND color(t),
            pos
    EVENTS ON INIT { EXPAND ALL TOP form##ObjectDim##TreeList.t; }
    FILTERS NOT isRoot(t)
    ORDERS  pos(t),name(t)
    FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(t) DEFAULT
    LIST ObjectDim OBJECT t;
    DESIGN   form##ObjectDim##TreeList { 
        PROPERTY (tabName(t)) { charWidth=100; }
    };
  
   // форма для редактирования списка - открывается только из меню
    EXTEND FORM  form##ObjectDim##list  
    OBJECTS d = ObjectDim 
    PROPERTIES(d)   
    ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(d) <- NOT isHide(d);}
    BACKGROUND  #e3e3e3 IF isHide(d)
    isRoot,NEW ,DELETE,
                    isGroup BACKGROUND color(d),
                    levelNum BACKGROUND color(d), 
                   
                    pos BACKGROUND color(d), 
                    tabName BACKGROUND color(d), 
                    name BACKGROUND color(d) 
                    

    PROPERTIES      parent 'Родитель' = name(parent(d)) ON CHANGE selectGroup(d) BACKGROUND color(d),
                    canonicalName(d) BACKGROUND color(d)
    ORDERS  pos(d),canonicalName(d) 
    FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(d) DEFAULT
    ; 
 END


META configDim2TaskTune(ObjectDim,checked,var) 
    EXTEND FORM  taskTune
    OBJECTS var = ObjectDim
    PROPERTIES  checked(f,var) BACKGROUND IF isGroup(var) THEN Budget.groupBackColor(3) // #f2f2f2
    PROPERTIES READONLY pos(var),name(var),tabName(var),canonicalName(var)
    ORDERS pos(var),canonicalName(var)
   // FILTERS NOT isRoot(var)
    ;
    
    DESIGN taskTune { // расширяем дизайн формы Item
        PROPERTY (name(var)) { hide = TRUE; }
        PROPERTY (canonicalName(var)) { hide = TRUE; } 
        PROPERTY (pos(var)) { charWidth = 5; flex = FALSE; } 
        details {
            MOVE BOX(var){
                  showIf = NOT isGroup(f);
            }
        }
    };
    
END

META configDimWOGroup(ObjectDim)

pos 'Порядок' = DATA INTEGER  (ObjectDim) IN base CHARWIDTH 5;
code 'Код' = DATA STRING[15] (ObjectDim) IN id;
name 'Наименование' = DATA ISTRING[254] (ObjectDim) IN id INDEXED ;
uuidInit 'Первоначальный uuid' = DATA ISTRING[36] (ObjectDim) IN id INDEXED ;
isRoot 'корень' = DATA BOOLEAN (ObjectDim);
isHide 'Скрыт' = DATA BOOLEAN (ObjectDim);
isGroup 'Е' = DATA BOOLEAN (ObjectDim);
getRoot##ObjectDim()   = GROUP MAX ObjectDim c IF isRoot(c) AND  NOT isGroup(c);
getEmpty##ObjectDim() = GROUP MAX ObjectDim c IF isRoot(c) AND isGroup(c);
 

WHEN LOCAL CHANGED(isRoot(ObjectDim sd))  AND ( (GROUP SUM(1) IF (isRoot(ObjectDim all) AND NOT isGroup(all) AND all IS ObjectDim)) > 1 ) DO {
   isRoot(sd)<-NULL ;
   MESSAGE 'только один элемент может представлять корень';
};
     
FORM  form##ObjectDim##Selectlist  'Выбор элемента'
    OBJECTS  d = ObjectDim  
    PROPERTIES(d)  READONLY  
    ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(d) <- NOT isHide(d);}
    BACKGROUND  #e3e3e3 IF isHide(d) 
    pos, code, name 
    PROPERTIES(d) NEWEDIT,EDIT 
    
     // EVENTS ON INIT { EXPAND ALL TOP form##ObjectDim##TreeList.t; }
    FILTERS NOT (isRoot(d) AND NOT isGroup(d)) 
    ORDERS  pos(d)
    FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(d) DEFAULT
    LIST ObjectDim OBJECT d
    ;

DESIGN   form##ObjectDim##Selectlist { 
   PROPERTY  (name(d))  { charWidth=40; defaultCompare='=*';}
   PROPERTY  (pos(d))   { hide = TRUE ; }
   BOX { size = (1200,600);}
} ;      

delAll##ObjectDim 'удалить все'() {
 DELETE ObjectDim a WHERE a IS ObjectDim ;
};
// форма для редактирования списка - открывается только из меню
EXTEND FORM  form##ObjectDim##list  
OBJECTS d = ObjectDim 
//PROPERTIES delAll##ObjectDim()
PROPERTIES(d)   isRoot,isGroup,isHide, NEW ,DELETE, 
               pos, code, name, uuidInit 
ORDERS  pos(d) 
; 
NAVIGATOR {
dimCatalogs   {
                 NEW form##ObjectDim##list;
              }
}  


current##ObjectDim = DATA LOCAL ObjectDim ();


newByName##ObjectDim##WoCheck(STRING name) {
  IF name AND NOT (name == '') THEN {
              NEW  new =  ObjectDim  {
                  name(new) <- name;
                  current##ObjectDim() <- new;
              }
  }  
}     


newByName##ObjectDim(STRING name) {
 IF name AND NOT (name == '') THEN {
    current##ObjectDim() <- GROUP MAX ObjectDim d IF name(d) == name;
    IF (NOT current##ObjectDim())   THEN {
              NEW  new =  ObjectDim  {
                  name(new) <- name;
                  current##ObjectDim() <- new;
           }
    }  
 }
 ELSE current##ObjectDim() <- NULL;
}       




importStr###ObjectDim = DATA LOCAL STRING (INTEGER); 
importUuidStr###ObjectDim = DATA LOCAL STRING[36] (INTEGER);       
import###ObjectDim    = DATA LOCAL ##ObjectDim(INTEGER);       
 
newByImportIndex##ObjectDim(INTEGER n) {
 IF importStr###ObjectDim(n) AND length(importStr###ObjectDim(n)) > 0 THEN {
    current##ObjectDim() <- GROUP MAX ObjectDim d IF name(d) == importStr###ObjectDim(n);
    IF (NOT current##ObjectDim())   THEN {
              NEW  new =  ObjectDim  {
                  name(new) <- importStr###ObjectDim(n);
                  uuidInit(new) <- importUuidStr###ObjectDim(n);
                  current##ObjectDim() <- new;
           }
    }  
 }
 ELSE current##ObjectDim() <- NULL;
}    

syncByName##ObjectDim() {
    FOR import###ObjectDim(INTEGER i) DO import###ObjectDim(i) <- NULL;
    // если указан uuid то сначала смотрим по нему существующие элементы, если было переименование в первичном источнике!!! 
    FOR [GROUP MAX importUuidStr###ObjectDim(INTEGER n) IF length(importUuidStr###ObjectDim(n)) == 36 BY n](INTEGER nm) 
        AND 
        uuidInit(##ObjectDim p) == importUuidStr###ObjectDim(nm) 
        AND 
        name(p) != importStr###ObjectDim(nm)
        DO {
      name(p) <- importStr###ObjectDim(nm);
    }
      // остальное заводим по имени!!!
    FOR [GROUP MAX importStr###ObjectDim(INTEGER n) BY importStr###ObjectDim(n)](STRING nm) AND NOT (GROUP MAX ##ObjectDim p IF name(p) == nm) DO {
        newByName##ObjectDim(nm);
    }
    // если захотели добавить UUID
    FOR [GROUP MAX importUuidStr###ObjectDim(INTEGER n) IF length(importUuidStr###ObjectDim(n)) == 36 BY n](INTEGER nm) 
        AND 
        NOT uuidInit(##ObjectDim p)  
        AND 
        name(p) == importStr###ObjectDim(nm)
        DO {
             uuidInit(p) <- importUuidStr###ObjectDim(nm);
    }
  
    // синхронизируем по имени
    FOR importStr###ObjectDim(INTEGER n) = name(##ObjectDim p) DO {
        import###ObjectDim(n) <- p;
    }
}                
    
    // Категории
   categoryValueName(Object p) += WHEN p IS ##ObjectDim THEN name(p AS ##ObjectDim);
   categoryValueClass(Object p) += WHEN p IS ##ObjectDim THEN ''##ObjectDim;
 // функция входимости объекта
objectInCategory 'функция входимости объекта в категорию' (DimCategoryItemsNamed n, ##ObjectDim o) = 
    GROUP MAX categoryGroup(DimCategory dk, ##ObjectDim o_) IF itemsName(dk) == n  AND o_ IS ##ObjectDim BY o_;
    
    
objectExistInCategory 'Есть ли в категории такой объект' (DimCategory n, ##ObjectDim o) = 
    GROUP MAX TRUE  IF categoryGroup(DimCategory dk, ##ObjectDim o_) AND dk == n  AND o_ IS ##ObjectDim;
    
objectInCategoryOrEpmty 'функция входимости объекта в категорию' (DimCategory n, ##ObjectDim o) = 
    OVERRIDE NOT objectExistInCategory(n, o),
    (GROUP MAX TRUE IF categoryGroup(DimCategory dk, ##ObjectDim o_) AND dk == n  AND o_ IS ##ObjectDim AND o_ == o);       
    
  EXTEND FORM  form##ObjectDim##list
  OBJECTS catg = DimCategory PANEL 
  PROPERTIES PANEL nameCat 'Категория' =  codeCt(catg) SELECTOR 
  PROPERTIES  
    inCatGroup 'вкл' = categoryGroup(catg, d)   
    HEADER  codeCt(GROUP MAX  DimCategory a_ IF [VIEW form##ObjectDim##list.catg](a_))  
    DRAW d GRID FIRST;
    
   DESIGN form##ObjectDim##list {
       PROPERTY (inCatGroup) {charWidth = 5;};
      
      TOOLBARRIGHT (d) {
          MOVE PROPERTY (nameCat){charWidth = 10;};
      }
      
   }
END

META configDimWO(ObjectDim)
CLASS  ObjectDim##Named{
  empty ''
}

name(ObjectDim##Named obj_) = staticCaption(obj_); 
itemsCode 'Код элемента' (ObjectDim##Named obj) =  regexpReplace(staticName(obj),'.*\\.','','');

pos 'Порядок' = DATA INTEGER  (ObjectDim) IN base CHARWIDTH 5;
code 'Код' = DATA STRING[15] (ObjectDim) IN id;
name 'Наименование' = DATA ISTRING[254] (ObjectDim) IN id INDEXED ;
uuidInit 'Первоначальный uuid' = DATA ISTRING[36] (ObjectDim) IN id INDEXED ;
nameWoDuble(ObjectDim s) =  regexpReplace(name(s),'"','','g'); 
isGroup 'Группа' = DATA BOOLEAN (ObjectDim);
isHide 'Скрыт' = DATA BOOLEAN (ObjectDim);
parent 'Родитель' = DATA ObjectDim(ObjectDim);
isRoot 'корень' = DATA BOOLEAN (ObjectDim);
itemsName 'Имя для формул' = DATA ObjectDim##Named(ObjectDim); 
get##ObjectDim##ByItem(ObjectDim##Named obj) = GROUP MAX ObjectDim d_ IF itemsName(d_) == obj;
itemsCode 'Код элемента' (ObjectDim obj) =  regexpReplace(staticName(itemsName(obj)),'.*\\.','','');

level 'Уровень' (ObjectDim child, ObjectDim parent) =
   RECURSION 1l IF child IS ObjectDim AND parent = child
        STEP 2l IF parent = parent($parent) MATERIALIZED;
        
levelInt 'Уровень' (ObjectDim child, ObjectDim parent) =
   RECURSION 1l IF child IS ObjectDim AND parent = child
        STEP 1l IF parent = parent($parent) MATERIALIZED;   
        
isParent 'Родитель' (ObjectDim child, ObjectDim parent) = TRUE IF level(child, parent) MATERIALIZED;
        
canonicalName 'Каноническое имя' (ObjectDim group) =  GROUP CONCAT name(ObjectDim parent), ' / ' ORDER DESC level(group, parent) CHARWIDTH 50;

mainOrder 'Основной порядок сортировки'  (ObjectDim group) = //GROUP SUM 1 IF canonicalName(group) > canonicalName(ObjectDim group_)
STRING[9](
ltrim(toChar((GROUP SUM 1 IF canonicalName(group) > canonicalName(ObjectDim group_)),'000000000'))
) 
MATERIALIZED INDEXED 
CHARWIDTH 9;

levelNum 'levelNum' (ObjectDim group) =            (GROUP  MAX level(group, parent))  CHARWIDTH 2;
levelNumInt 'levelNumInt' (ObjectDim group) = LONG (GROUP  SUM levelInt(group, parent))-1  CHARWIDTH 2; // от 0 
maxLevelInt 'Максимальный уровень' (ObjectDim c, INTEGER maxLevel) = IF maxLevel > 0 THEN maxLevel ELSE (GROUP MAX levelNumInt(ObjectDim all_))+1;     

getLevelObj(ObjectDim ch, INTEGER lvl ) =  (GROUP MAX ObjectDim parent AS  ObjectDim IF  levelInt(ch,parent) AND levelNumInt(parent) == lvl);
     
 

backgroundColor(ObjectDim s) = IF isGroup(s) THEN Budget.groupBackColor(3) ;   
tabName 'имя' (ObjectDim group) =  (GROUP CONCAT '    ','    ' ORDER DESC level(group, parent)) + name(group) CHARWIDTH 15;
tabNameTabbed 'имя' (ObjectDim group) =  (GROUP CONCAT '\t','\t' ORDER DESC level(group, parent)) + name(group) CHARWIDTH 15;
getRoot##ObjectDim()  = GROUP MAX ObjectDim c IF isRoot(c) AND NOT isGroup(c);
getEmpty##ObjectDim() = GROUP MAX ObjectDim c IF isRoot(c) AND isGroup(c);
WHEN LOCAL CHANGED(isRoot(ObjectDim sd))  AND ( (GROUP SUM(1) IF (isRoot(ObjectDim all) AND NOT isGroup(all)  AND all IS ObjectDim)) > 1 ) DO {
   isRoot(sd)<-NULL ;
   MESSAGE 'только один элемент может представлять корень';
};
// список для выбора группы 
EXTEND FORM form##ObjectDim##Group  
OBJECTS d = ObjectDim 
PROPERTIES(d) 
ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(d) <- NOT isHide(d);}
BACKGROUND  #e3e3e3 IF isHide(d)
READONLY pos, code, canonicalName
ORDERS pos(d),canonicalName(d) FILTERS isGroup(d) AND NOT isRoot(d)
FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(d) DEFAULT;

selectGroup(ObjectDim r) {
 DIALOG form##ObjectDim##Group OBJECTS d = parent(r) CHANGE;
};
     
EXTEND  FORM  form##ObjectDim##TreeList  
TREE tree##ObjectDim t = ObjectDim  PARENT parent(t)
PROPERTIES (t)     
    ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(t) <- NOT isHide(t);}
    BACKGROUND  #e3e3e3 IF isHide(t)
       
        tabName  BACKGROUND backgroundColor(t)  
        ,pos
EVENTS ON INIT {EXPAND ALL TOP form##ObjectDim##TreeList.t;} 
FILTERS NOT (isRoot(t) AND isGroup(t)) 
ORDERS  pos(t),tabName(t) 
FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(t) DEFAULT
LIST ObjectDim OBJECT t;
DESIGN   form##ObjectDim##TreeList { 
   
    PROPERTY (tabName(t)) { charWidth=100; }
} ;

FORM  form##ObjectDim##Card
OBJECTS c = ObjectDim PANEL
PROPERTIES (c) name

EDIT ObjectDim OBJECT c;
         
                         
FORM form##ObjectDim##Selectlist 'Выбор элемента' 
    OBJECTS  d = ObjectDim  
    PROPERTIES(d)  READONLY 
    ON CONTEXTMENU 'скрыть элемент вкл/выкл' {isHide(d) <- NOT isHide(d);}
    BACKGROUND  #e3e3e3 IF isHide(d)
    tabName  BACKGROUND backgroundColor(d)  BACKGROUND backgroundColor(d)   
    ,pos  ,canonicalName
    PROPERTIES(d) NEWEDIT,EDIT 
    FILTERS   NOT (isRoot(d) AND isGroup(d)) 
    ORDERS  pos(d), canonicalName(d)
    FILTERGROUP hided FILTER 'Скрывать неиспользуемые' NOT isHide(d) DEFAULT
    ;

DESIGN   form##ObjectDim##Selectlist { 
   PROPERTY  (tabName(d))   { charWidth=60; defaultCompare='=*';}
   PROPERTY  (pos(d))   { hide = TRUE ; }
   PROPERTY (canonicalName(d)) {charWidth=20; defaultCompare='=*'; }
  BOX { size = (1200,600);}
} ;      

delAll##ObjectDim 'удалить все'() {
 DELETE ObjectDim a WHERE a IS ObjectDim ;
};

     
      // форма для редактирования списка - открывается только из меню
       EXTEND FORM  form##ObjectDim##list  
       OBJECTS d = ObjectDim 
  //     PROPERTIES delAll##ObjectDim()
       PROPERTIES mainOrder(d),levelNumInt(d) 
       PROPERTIES(d)   isRoot,NEW ,DELETE, 
                       isGroup BACKGROUND backgroundColor(d),
                       isHide BACKGROUND backgroundColor(d),
                       levelNum BACKGROUND backgroundColor(d), 
                       
                       pos BACKGROUND backgroundColor(d), 
                       code BACKGROUND backgroundColor(d), 
                       tabName BACKGROUND backgroundColor(d), 
                       name BACKGROUND backgroundColor(d) 
       PROPERTIES      itemsName 'Имя для формул' = name(itemsName(d)),
                        parent 'Родитель' = name(parent(d)) ON CHANGE selectGroup(d) BACKGROUND backgroundColor(d),
                       canonicalName(d) BACKGROUND backgroundColor(d)
       ORDERS  pos(d),canonicalName(d) 
       ; 
       DESIGN  form##ObjectDim##list {
       
        PROPERTY (tabName(d)) {charWidth=20; defaultCompare='=*'; }
        PROPERTY (name(d)) {charWidth=20; defaultCompare='=*'; }
       }  
       NAVIGATOR {
                   dimCatalogs   {
                    NEW form##ObjectDim##list;
                   }
                 }
        
        

current##ObjectDim = DATA LOCAL ObjectDim ();

newByName##ObjectDim(STRING name) {
 IF name AND NOT (name == '') THEN {
    current##ObjectDim() <- GROUP MAX ObjectDim d IF name(d) == name;
    IF (NOT current##ObjectDim())   THEN {
              NEW  new =  ObjectDim  {
                  name(new) <- name;
                  current##ObjectDim() <- new;
           }
    }  
 }
 ELSE current##ObjectDim() <- NULL;
}
importStr###ObjectDim = DATA LOCAL STRING (INTEGER);    
importUuidStr###ObjectDim = DATA LOCAL STRING[36] (INTEGER);  
import###ObjectDim    = DATA LOCAL ##ObjectDim(INTEGER);       

newByImportIndex##ObjectDim(INTEGER n) {
 IF importStr###ObjectDim(n) AND length(importStr###ObjectDim(n)) > 0 THEN {
    current##ObjectDim() <- GROUP MAX ObjectDim d IF name(d) == importStr###ObjectDim(n);
    IF (NOT current##ObjectDim())   THEN {
              NEW  new =  ObjectDim  {
                  name(new) <- importStr###ObjectDim(n);
                  uuidInit(new) <- importUuidStr###ObjectDim(n);
                  current##ObjectDim() <- new;
           }
    }  
 }
 ELSE current##ObjectDim() <- NULL;
}    

syncByName##ObjectDim() {
    FOR import###ObjectDim(INTEGER i) DO import###ObjectDim(i) <- NULL;
    // если указан uuid то сначала смотрим по нему существующие элементы, если было переименование в первичном источнике!!! 
    FOR [GROUP MAX importUuidStr###ObjectDim(INTEGER n) IF length(importUuidStr###ObjectDim(n)) == 36 BY n](INTEGER nm) 
        AND 
        uuidInit(##ObjectDim p) == importUuidStr###ObjectDim(nm) 
        AND 
        name(p) != importStr###ObjectDim(nm)
        DO {
             name(p) <- importStr###ObjectDim(nm);
    }
    
       
    // остальное заводим по имени!!!
    FOR [GROUP MAX importStr###ObjectDim(INTEGER n) BY importStr###ObjectDim(n)](STRING nm) AND NOT (GROUP MAX ##ObjectDim p IF name(p) == nm) DO {
        newByName##ObjectDim(nm);
    }
    
    // если захотели добавить UUID
    FOR [GROUP MAX importUuidStr###ObjectDim(INTEGER n) IF length(importUuidStr###ObjectDim(n)) == 36 BY n](INTEGER nm) 
        AND 
        NOT uuidInit(##ObjectDim p)  
        AND 
        name(p) == importStr###ObjectDim(nm)
        DO {
             uuidInit(p) <- importUuidStr###ObjectDim(nm);
    }
 
    // синхронизируем по имени
    FOR importStr###ObjectDim(INTEGER n) = name(##ObjectDim p) DO {
        import###ObjectDim(n) <- p;
    }
}                       
 
// Категории
   categoryValueName(Object p) += WHEN p IS ##ObjectDim THEN name(p AS ##ObjectDim);
   categoryValueClass(Object p) += WHEN p IS ##ObjectDim THEN ''##ObjectDim;
 // функция входимости объекта
objectInCategory 'функция входимости объекта в категорию' (DimCategoryItemsNamed n, ##ObjectDim o) = 
    GROUP MAX categoryGroup(DimCategory dk, ##ObjectDim o_) IF itemsName(dk) == n  AND o_ IS ##ObjectDim BY o_;

objectInCategory 'функция входимости объекта в категорию' (DimCategory n, ##ObjectDim o) = 
    GROUP MAX categoryGroup(DimCategory dk, ##ObjectDim o_) IF dk == n  AND o_ IS ##ObjectDim BY o_;       
       
objectExistInCategory 'Есть ли в категории такой объект' (DimCategory n, ##ObjectDim o) = 
    GROUP MAX TRUE  IF categoryGroup(DimCategory dk, ##ObjectDim o_) AND dk == n  AND o_ IS ##ObjectDim;
    
objectInCategoryOrEpmty 'функция входимости объекта в категорию' (DimCategory n, ##ObjectDim o) = 
    OVERRIDE NOT objectExistInCategory(n, o),
    (GROUP MAX TRUE IF categoryGroup(DimCategory dk, ##ObjectDim o_) AND dk == n  AND o_ IS ##ObjectDim AND o_ == o);       
    
    
    
  EXTEND FORM  form##ObjectDim##list
  OBJECTS catg = DimCategory PANEL 
  PROPERTIES PANEL nameCat 'Категория' =  codeCt(catg) SELECTOR 
  PROPERTIES  
    inCatGroup 'вкл' = categoryGroup(catg, d)   
    HEADER  codeCt(GROUP MAX  DimCategory a_ IF [VIEW form##ObjectDim##list.catg](a_))  
    DRAW d GRID FIRST;
    
   DESIGN form##ObjectDim##list {
       PROPERTY (inCatGroup) {charWidth = 5;};
      
      TOOLBARRIGHT (d) {
          MOVE PROPERTY (nameCat){charWidth = 10;};
      }
      
   }
    
END 
 
META configCategory(ObjectDim)
  
// Категории
   categoryValueName(Object p) += WHEN p IS ##ObjectDim THEN name[##ObjectDim](p AS ##ObjectDim);
   categoryValueClass(Object p) += WHEN p IS ##ObjectDim THEN ''##ObjectDim;
 // функция входимости объекта
objectInCategory 'функция входимости объекта в категорию' (DimCategoryItemsNamed n, ##ObjectDim o) = 
    GROUP MAX categoryGroup(DimCategory dk, ##ObjectDim o_) IF itemsName(dk) == n  AND o_ IS ##ObjectDim BY o_;

objectInCategory 'функция входимости объекта в категорию' (DimCategory n, ##ObjectDim o) = 
    GROUP MAX categoryGroup(DimCategory dk, ##ObjectDim o_) IF dk == n  AND o_ IS ##ObjectDim BY o_;       
       
objectExistInCategory 'Есть ли в категории такой объект' (DimCategory n, ##ObjectDim o) = 
    GROUP MAX TRUE  IF categoryGroup(DimCategory dk, ##ObjectDim o_) AND dk == n  AND o_ IS ##ObjectDim;
    
objectInCategoryOrEpmty 'функция входимости объекта в категорию' (DimCategory n, ##ObjectDim o) = 
    OVERRIDE NOT objectExistInCategory(n, o),
    (GROUP MAX TRUE IF categoryGroup(DimCategory dk, ##ObjectDim o_) AND dk == n  AND o_ IS ##ObjectDim AND o_ == o);       
      
  EXTEND FORM  form##ObjectDim##list
  OBJECTS catg = DimCategory PANEL 
  PROPERTIES PANEL nameCat 'Категория' =  codeCt(catg) SELECTOR 
  PROPERTIES  
    inCatGroup 'вкл' = categoryGroup(catg, d)   
    HEADER  codeCt(GROUP MAX  DimCategory a_ IF [VIEW form##ObjectDim##list.catg](a_))  
    DRAW d GRID FIRST;
    
  DESIGN form##ObjectDim##list {
      PROPERTY (inCatGroup) {charWidth = 5;};
      
      TOOLBARRIGHT (d) {
          MOVE PROPERTY (nameCat){charWidth = 10;};
      }
   }
  NAVIGATOR {
  dimCatalogs   {
                 NEW form##ObjectDim##list;
              }
}    
    
    
END 

@configCategory(DimCategory);

// Категория констант категорий
@configCategory(DimCategoryItemsNamed);

MODULE DimensSize;

REQUIRE  Dimens;

NAMESPACE   Dimens; 

CLASS DimSize 'Размеры';
TABLE dimSize(DimSize);
FORM formDimSizeGroup 'Размеры'; 
FORM formDimSizelist 'Размеры'; 
  
FORM formDimSizeTreeList 'Размеры'; 
@configDimWO(DimSize){
pos 'Порядок' = DATA INTEGER  (DimSize) IN base CHARWIDTH 5;
code 'Код' = DATA STRING[15] (DimSize) IN id;
name 'Наименование' = DATA ISTRING[254] (DimSize) IN id INDEXED ;
isGroup 'Группа' = DATA BOOLEAN (DimSize);
parent 'Родитель' = DATA DimSize(DimSize);
isRoot 'корень' = DATA BOOLEAN (DimSize);

level 'Уровень' (DimSize child, DimSize parent) =
   RECURSION 1l IF child IS DimSize AND parent = child
        STEP 2l IF parent = parent($parent) MATERIALIZED;

isParent 'Родитель' (DimSize child, DimSize parent) = TRUE IF level(child, parent);
        
canonicalName 'Каноническое имя' (DimSize group) =  GROUP CONCAT name(DimSize parent), ' / ' ORDER DESC level(group, parent) CHARWIDTH 50;
levelNum 'levelNum' (DimSize group) =   (GROUP  MAX level(group, parent))  CHARWIDTH 2;
backgroundColor(DimSize s) = IF isGroup(s) THEN Budget.groupBackColor(3) ;   
tabName 'имя' (DimSize group) =  (GROUP CONCAT '    ','    ' ORDER DESC level(group, parent)) + name(group) CHARWIDTH 15;
getRootDimSize()  = GROUP MAX DimSize c IF isRoot(c) AND NOT isGroup(c);
getEmptyDimSize() = GROUP MAX DimSize c IF isRoot(c) AND isGroup(c);
WHEN LOCAL CHANGED(isRoot(DimSize sd))  AND ( (GROUP SUM(1) IF (isRoot(DimSize all) AND NOT isGroup(all)  AND all IS DimSize)) > 1 ) DO {
   isRoot(sd)<-NULL ;
   MESSAGE 'только один элемент может представлять корень';
};
// список для выбора группы 
EXTEND FORM formDimSizeGroup  
OBJECTS d = DimSize 
PROPERTIES(d) READONLY pos, code, canonicalName
ORDERS pos(d),canonicalName(d) FILTERS isGroup(d) AND NOT isRoot(d);

selectGroup(DimSize r) {
 DIALOG formDimSizeGroup OBJECTS d = parent(r) CHANGE;
};
     
EXTEND  FORM  formDimSizeTreeList  
TREE treeDimSize t = DimSize  PARENT parent(t)
PROPERTIES (t) tabName  BACKGROUND backgroundColor(t)  
,pos
// EVENTS ON INIT { EXPAND ALL TOP form##ObjectDim##TreeList.t; }
FILTERS NOT isRoot(t)
ORDERS  pos(t),tabName(t) 
LIST DimSize OBJECT t;
DESIGN   formDimSizeTreeList { 
    PROPERTY (tabName(t)) { charWidth='100'; }
} ;
         
                         
FORM formDimSizeSelectlist  
    OBJECTS  d = DimSize  
    PROPERTIES(d)  READONLY tabName  BACKGROUND backgroundColor(d)  BACKGROUND backgroundColor(d)   
    ,pos  ,canonicalName
    PROPERTIES(d) NEWEDIT,EDIT 
     // EVENTS ON INIT { EXPAND ALL TOP form##ObjectDim##TreeList.t; }
    FILTERS NOT isRoot(d)
    ORDERS  pos(d), canonicalName(d)
    ;

DESIGN   formDimSizeSelectlist { 
   PROPERTY  (tabName(d))   { charWidth='40'; defaultCompare =  'CONTAINS';}
   PROPERTY  (pos(d))   { hide = TRUE ; }
   PROPERTY (canonicalName(d)) { hide = TRUE ;  }
  BOX { size = (1200,600);}
} ;      

delAllDimSize 'удалить все'() {
 DELETE DimSize a WHERE a IS DimSize ;
};

     
      // форма для редактирования списка - открывается только из меню
       EXTEND FORM  formDimSizelist  
       OBJECTS d = DimSize 
       PROPERTIES delAllDimSize()
       PROPERTIES(d)   isRoot,NEW ,DELETE, 
                       isGroup BACKGROUND backgroundColor(d),
                       levelNum BACKGROUND backgroundColor(d), 
                       pos BACKGROUND backgroundColor(d), 
                       tabName BACKGROUND backgroundColor(d), 
                       name BACKGROUND backgroundColor(d) 
                       
   
       PROPERTIES      parent 'Родитель' = name(parent(d)) ON CHANGE selectGroup(d) BACKGROUND backgroundColor(d),
                       canonicalName(d) BACKGROUND backgroundColor(d)
       ORDERS  pos(d),canonicalName(d) 
       ; 
       
       NAVIGATOR {
                   dimCatalogs   {
                    NEW formDimSizelist;
                   }
                 }
        
        

currentDimSize = DATA LOCAL DimSize ();

newByNameDimSize(name) {
 IF name AND NOT (name == '') THEN {
    currentDimSize() <- GROUP MAX DimSize d IF name(d) == name;
    IF (NOT currentDimSize())   THEN {
              NEW  new =  DimSize  {
                  name(new) <- name;
                  currentDimSize() <- new;
           }
    }  
 }
 ELSE currentDimSize() <- NULL;
}
        
        
        
};

//INDEX name(DimSize d);
getDimSize(STRING name) = 
GROUP MAX DimSize d IF name(d) == name;

 
checkDimSize(STRING name){
    IF name AND NOT getDimSize(name) THEN {
            NEW s=DimSize {
             name(s) <- name; 
            }
    }
}
 newDimSize(STRING name){
             NEW s=DimSize {
              name(s) <- name; 
             }
 } 
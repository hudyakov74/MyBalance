MODULE CubeBfProductDayBalance;

REQUIRE  Cube,DimensRawNomenkl,Utils,CalcTask;

NAMESPACE BfProductDayBalance;

CLASS  CubeBfProductDayBalance 'бюджет - расчет объема закупа по дням';
@createCubeReqDim(CubeBfProductDayBalance,cubeBfProductDayBalance){
TABLE cubeBfProductDayBalance(CubeBfProductDayBalance);
task   'задача' = DATA Task(CubeBfProductDayBalance) INDEXED IN id;
period 'Период' = DATA Period(CubeBfProductDayBalance) INDEXED IN id; // для плоских списков 
calc   'расчет' = DATA Calc(CubeBfProductDayBalance) INDEXED IN id NONULL;
};

product     'продукт' = DATA DimRawNomenkl(CubeBfProductDayBalance) NONULL;
balansStoreDate 'дата' = DATA DATE(CubeBfProductDayBalance);
balansStore 'Остаток склада' = DATA NUMERIC[18,2](CubeBfProductDayBalance);
balansReq 'для закупа' = DATA NUMERIC[18,2](CubeBfProductDayBalance);
//balansReq будем считать с кнопочки


getBalansStore(CalcTask ct, prod, date) =  GROUP MAX balansStore(cb) IF 
    calc(cb) == calc(ct) AND  task(cb) == task(ct)
     BY product(cb), balansStoreDate(cb);

getBalansReq(CalcTask ct, prod, date) = 
    GROUP SUM balansReq(cb) IF 
    calc(cb) == calc(ct) AND  task(cb) == task(ct) 
     BY product(cb), balansStoreDate(cb);
 
     

getBalansStoreProduct(CalcTask ct, prod  ) = 
 GROUP MAX product(cb) IF 
    calc(cb) == calc(ct) AND  task(cb) == task(ct)
     BY product(cb) ;
     
 getBalansStoreProductMin(CalcTask ct, prod  ) = 
      GROUP MIN  balansStore(cb) IF 
         calc(cb) == calc(ct) AND  task(cb) == task(ct)
          BY product(cb) ;
          
 getBalansStoreProductDayRez(day) =  GROUP SUM(balansReq(cb))   IF 
                          calc(cb) == calc(ct) AND  task(cb) == task(ct)
                          BY balansStoreDate(cb) ;    
MODULE ActionBfProductBalance;

REQUIRE  FormBfProductBalance,Utils,DimRawNomenklBf,BfUtils;

NAMESPACE Forms;

// процедуры загрузки
EXTEND CLASS TypeRequest {
    FormBfProductBalance1 'Загрузка остатков бф коллекшн (Торговый баланс. форма 1)',
    FormBfProductBalance2 'Загрузка продаж бф стайл (Торговый баланс. форма 1)', 
    FormBfProductBalance3 'Выгрузка реестра в бф стайл (Торговый баланс. форма 1)'
}
 
// sumGroup(rezGroup) = GROUP SUM(Chart4XQuantity(INTEGER n)) BY Chart4XRef_Key(n) ;

Report1FormBfProductBalance1(CalcTask ct,ExtRequest extR){

    headers('Authorization') <- password(extSource(extR)); 
    LOCAL result = FILE();
    
// СПИСОК НОМЕНКЛАТУРЫ   
    EXTERNAL HTTP GET conectString(extSource(extR)) + 
    'Catalog_Номенклатура?$filter=IsFolder%20eq%20false&$format=json&$select=Ref_Key,Артикул,Code,Description' 
        HEADERS headers TO result;
    LOCAL nRef_KeyN = BPSTRING[36] (INTEGER);
    LOCAL nArtikle  = BPSTRING[50] (INTEGER);
    LOCAL nCode = BPSTRING[11] (INTEGER);
    LOCAL nDescription = BPSTRING[100] (INTEGER);
    
    IMPORT JSON FROM result()  TO   nRef_KeyN = 'Ref_Key',
                                    nArtikle = 'Артикул',
                                    nCode = 'Code',
                                    nDescription ='Description'; 
// 41.01   43                                
    LOCAL ChartRef_Key = BPSTRING[36] (INTEGER);
    LOCAL ChartCode = BPSTRING[11] (INTEGER);
      
    EXTERNAL HTTP GET conectString(extSource(extR)) + 
        'ChartOfAccounts_Хозрасчетный?$filter=Code%20eq%20%2741.01%27%20or%20Code%20eq%20%2743%27&$format=json' 
         HEADERS headers TO result;                                
    IMPORT JSON FROM result()  TO   ChartRef_Key = 'Ref_Key', ChartCode = 'Code';                                
     
// остатки по счетам суммируем
   
   EXTERNAL HTTP GET conectString(extSource(extR)) + 
 'AccountingRegister_Хозрасчетный/Balance(Period=datetime%272020-06-30T23:59:59%27,AccountCondition=%27Account_Key%20eq%20guid%27'
 + (GROUP MAX ChartRef_Key(INTEGER i) IF  ChartCode(i) == '41.01')
 +'%27%20or%20Account_Key%20eq%20guid%27' 
 +(GROUP MAX ChartRef_Key(INTEGER i) IF  ChartCode(i) == '43')
 +'%27%27)?$select=ExtDimension1,КоличествоBalance,СуммаBalance&$format=json' HEADERS headers TO result;  
  
  LOCAL     Chart4XRef_Key  =    BPSTRING[36] (INTEGER);
 LOCAL     Chart4XQuantity =    NUMERIC[18,2] (INTEGER);
 LOCAL     Chart4XSum =    NUMERIC[18,2] (INTEGER);
 IMPORT JSON FROM result()  TO   Chart4XRef_Key = 'ExtDimension1', Chart4XQuantity = 'КоличествоBalance',Chart4XSum = 'СуммаBalance'; 
 LOCAL nameM =  DimRawNomenkl(INTEGER);


   FOR imported(INTEGER n) DO {
       addDimRawNomenklArticle((GROUP MAX  nDescription(INTEGER m) IF nRef_KeyN(m) == Chart4XRef_Key(n)),
                        (GROUP MAX      nArtikle(INTEGER m) IF nRef_KeyN(m) == Chart4XRef_Key(n)),
                         'BfBuh');
       nameM(n) <- rawNomenkl();
   } 
  LOCAL  currCPr = CubeProductBalanceCalc1(); 
  //LOCAL sum = NUMERIC[18,2]();
 //заполним список
   FOR imported(INTEGER num) DO {
        
        currCPr() <- GROUP MAX CubeProductBalanceCalc1 c IF task(c) == task(ct) 
                                                                   AND  calc(c) == calc(ct)
                                                                   AND  product(c) == nameM(num);
        IF currCPr() THEN {
           // sum() <- balansStore( currCPr() );
            balansStore(currCPr()) <- balansStore(currCPr()) (+) Chart4XQuantity(num);
        }
        ELSE 
         NEW n = CubeProductBalanceCalc1 {
            product(n) <-  nameM(num) ;
            balansStore(n) <- Chart4XQuantity(num);
            balansStoreSum(n) <-  Chart4XSum(num);
            task(n) <- task(ct);
            calc(n) <- calc(ct);
        }
   }
  
}


Report1FormBfProductBalance2(CalcTask ct,ExtRequest extR){
// продажи... 

  headers('Authorization') <- password(extSource(extR)); 
    LOCAL result = FILE();
    
// СПИСОК НОМЕНКЛАТУРЫ   
    EXTERNAL HTTP GET conectString(extSource(extR)) + 
    'Catalog_Номенклатура?$filter=IsFolder%20eq%20false&$format=json&$select=Ref_Key,Артикул,Code,Description' 
        HEADERS headers TO result;
    LOCAL nRef_KeyN = BPSTRING[36] (INTEGER);
    LOCAL nArtikle  = BPSTRING[50] (INTEGER);
    LOCAL nCode = BPSTRING[11] (INTEGER);
    LOCAL nDescription = BPSTRING[100] (INTEGER);
    
    IMPORT JSON FROM result()  TO   nRef_KeyN = 'Ref_Key',
                                    nArtikle = 'Артикул',
                                    nCode = 'Code',
                                    nDescription ='Description'; 
// 41.01                                  
    LOCAL ChartRef_Key = BPSTRING[36] (INTEGER);
    LOCAL ChartCode = BPSTRING[11] (INTEGER);
      
    EXTERNAL HTTP GET conectString(extSource(extR)) + 
        'ChartOfAccounts_Хозрасчетный?$filter=Code%20eq%20%2741.01%27&$format=json' 
         HEADERS headers TO result;                                
    IMPORT JSON FROM result()  TO   ChartRef_Key = 'Ref_Key', ChartCode = 'Code';                                
     
// остатки по счетам суммируем
 //  StartPeriod=datetime'2016-01-01T00:00:00',EndPeriod=datetime'2016-01-31T23:59:59'
 // StartPeriod=datetime%272020-06-01T00:00:00%27,EndPeriod=datetime%272020-10-01T00:00:00%27,
 
 // обороты
//   EXTERNAL HTTP GET conectString(extSource(extR)) + 
// 'AccountingRegister_Хозрасчетный/Turnovers(AccountCondition=%27Account_Key%20eq%20guid%27'
// + (GROUP MAX ChartRef_Key(INTEGER i) IF  ChartCode(i) == '41.01')
// +'%27)?$select=ExtDimension1,КоличествоTurnoverCr&$format=json' HEADERS headers TO result;  
 
 // лучше взять отрицательные остатки
    EXTERNAL HTTP GET conectString(extSource(extR)) + 
  'AccountingRegister_Хозрасчетный/Balance(Period=datetime%272020-09-30T23:59:59%27,AccountCondition=%27Account_Key%20eq%20guid%27'
  + (GROUP MAX ChartRef_Key(INTEGER i) IF  ChartCode(i) == '41.01')
  +'%27)?$select=ExtDimension1,КоличествоBalance&$format=json' HEADERS headers TO result; 
 
 
   LOCAL     Chart4XRef_Key  =    BPSTRING[36] (INTEGER);
   LOCAL     Chart4XQuantity =    NUMERIC[18,2] (INTEGER);
   LOCAL     Chart4XQuantity1 =    NUMERIC[18,2] (INTEGER);
 IMPORT JSON FROM result()  TO   Chart4XRef_Key = 'ExtDimension1', Chart4XQuantity = 'КоличествоBalance'; 
 LOCAL nameM =  DimRawNomenkl(INTEGER);
 // добавим имя


   FOR (imported(INTEGER n)) AND (Chart4XQuantity(n)<0) DO {
    
       addDimRawNomenklArticle((GROUP MAX  nDescription(INTEGER m) IF nRef_KeyN(m) == Chart4XRef_Key(n)),
                        (GROUP MAX      nArtikle(INTEGER m) IF nRef_KeyN(m) == Chart4XRef_Key(n)),
                         'BfBuh');
       nameM(n) <- rawNomenkl();
       
   } 
 
  LOCAL  currCPr = CubeProductBalanceCalc1(); 
  
  MESSAGE (GROUP SUM Chart4XQuantity(n));
 //заполним список
   FOR (imported(INTEGER num)) AND (Chart4XQuantity(num)<0)   DO   {
     
         currCPr() <- GROUP MAX CubeProductBalanceCalc1 c IF task(c) == task(ct) 
                                                           AND  calc(c) == calc(ct)
                                                           AND  product(c) == nameM(num);
         IF   currCPr() THEN  required(currCPr()) <- -Chart4XQuantity(num);
         ELSE   NEW n = CubeProductBalanceCalc1 {
                 
                 product(n) <-  nameM(num) ;
                 required(n) <- -Chart4XQuantity(num);
              
                 task(n) <- task(ct);
                 calc(n) <- calc(ct);
            }
           
         
                                                          
                   
         
//        product(n) <-  nameM(num) ;
//        balansStore(n) <- Chart4XQuantity(num);
//     
//        task(n) <- task(ct);
//        calc(n) <- calc(ct);
   }


}



//writeDoc 'записать' INTERNAL 'WriteDocTable'  (  CSVFILE ,STRING[100],STRING[100],STRING[100],DATE ) ;

Report1FormBfProductBalance3(CalcTask ct,ExtRequest extR){
    LOCAL result = FILE();
    headers('Authorization') <- password(extSource(extR)); 
// СПИСОК НОМЕНКЛАТУРЫ   
    EXTERNAL HTTP GET conectString(extSource(extR)) + 
    'Catalog_Номенклатура?$filter=IsFolder%20eq%20false&$format=json&$select=Ref_Key,Артикул,ЕдиницаИзмерения_Key,Description' 
    HEADERS headers TO result;
    LOCAL nRef_KeyN = BPSTRING[36] (INTEGER);
    LOCAL nArtikle  = BPSTRING[50] (INTEGER);
    LOCAL nEd = BPSTRING[36] (INTEGER);
    LOCAL nDescription = BPSTRING[100] (INTEGER);
    
    IMPORT JSON FROM result()  TO   nRef_KeyN = 'Ref_Key',
                                    nArtikle = 'Артикул',
                                    nEd = 'ЕдиницаИзмерения_Key',
                                    nDescription ='Description'; 
     LOCAL file = CSVFILE();
    //RemoveBF('f')
     LOCAL keyByArticle  = STRING[100] (CubeProductBalanceCalc1); 
     LOCAL edByArticle   = STRING[100] (CubeProductBalanceCalc1);     
     keyByArticle(CubeProductBalanceCalc1 cc) <- 
        IF   GROUP MAX nRef_KeyN(i) IF RemoveBF(nArtikle(i)) ==  article(product(cc))
        THEN GROUP MAX nRef_KeyN(i) IF RemoveBF(nArtikle(i)) ==  article(product(cc))
        ELSE GROUP MAX nRef_KeyN(i) IF  nDescription(i) ==  name(product(cc));
     edByArticle(CubeProductBalanceCalc1 cc) <- 
             IF   GROUP MAX nEd(i) IF RemoveBF(nArtikle(i)) ==  article(product(cc))
             THEN GROUP MAX nEd(i) IF RemoveBF(nArtikle(i)) ==  article(product(cc))
             ELSE GROUP MAX nEd(i) IF  nDescription(i) ==  name(product(cc));
     
     
      EXPORT CSV NOHEADER FROM purchase(CubeProductBalanceCalc1 curr IF (purchase(curr) > 0) AND (task(curr) == task(ct)) AND  (calc(curr) == calc(ct))),
                               purchasePrice(curr IF (purchase(curr ) > 0) AND (task(curr) == task(ct)) AND  (calc(curr) == calc(ct))),
                               purchaseSum(curr IF (purchase(curr) > 0) AND (task(curr) == task(ct)) AND  (calc(curr) == calc(ct))),
                               keyByArticle(curr IF (purchase(curr) > 0) AND (task(curr) == task(ct)) AND  (calc(curr) == calc(ct))),
                               edByArticle(curr IF (purchase(curr) > 0) AND (task(curr) == task(ct)) AND  (calc(curr) == calc(ct)))
      TO file;
  //   WRITE CLIENT DIALOG file() TO 'loadedfile';
     writeDoc( file(),conectString(extSource(extR)),
                     IF user(extSource(extR)) THEN user(extSource(extR)) ELSE '',
                     password(extSource(extR)) ,
                     currentDate());  
}
 
 
// ПРОЦЕДУРА ВЫБОРА
functionsRepComReport(CalcTask ct,ExtRequest er) + {
    // берем отчет - грузим отчет
   CASE EXCLUSIVE  
             WHEN type(er) == TypeRequest.FormBfProductBalance1 THEN { 
                            Report1FormBfProductBalance1(ct,er);
                            }
             WHEN type(er) == TypeRequest.FormBfProductBalance2 THEN { 
                            Report1FormBfProductBalance2(ct,er);
                            }
             WHEN type(er) == TypeRequest.FormBfProductBalance3 THEN { 
                                        Report1FormBfProductBalance3(ct,er);
                                        }
}